import qs from 'qs'
import React, { useEffect, useRef } from 'react'
import { useSelector } from 'react-redux'
import { useNavigate } from 'react-router-dom'
import Pagination from '../Pagination/index.tsx'
import Categories from '../components/Categories.tsx'
import PizzaBlock from '../components/PizzaBlock/PizzaBlock.tsx'
import Skeleton from '../components/PizzaBlock/Skeleton.tsx'
import Sort from '../components/Sort.tsx'
import {
	SortType,
	selectFilter,
	setFilters,
} from '../redux/slices/filterSlice.ts'
import { fetchPizzas, selectPizzas } from '../redux/slices/pizzasSlice.ts'
import { selectSearch } from '../redux/slices/searchSlice.ts'
import { useAppDispatch } from '../redux/store.ts'

const Home: React.FC = () => {
	const dispatch = useAppDispatch()
	const navigate = useNavigate()
	const isSearch = useRef<boolean>(false)
	const isMounted = useRef<boolean>(false)
	const { categoryId, page, sortType } = useSelector(selectFilter)
	const { items, status } = useSelector(selectPizzas)
	const { search } = useSelector(selectSearch)

	const getPizzas = async () => {
		const category = categoryId > 0 ? `category=${categoryId}` : ''
		const searchValue = search ? `&search=${search}` : ''
		// @ts-ignore
		dispatch(fetchPizzas({ category, searchValue, page, sortType }))
	}

	/** –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –≤—à–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ URL */
	useEffect(() => {
		if (isMounted.current) {
			const queryString = qs.stringify({
				sortType,
				categoryId,
				page,
			})

			navigate(`?${queryString}`)
		}
		isMounted.current = true
	}, [categoryId, sortType, page])

	/** –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL, –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ—Ç —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ä–µ–¥–∞–∫—Å–µ */
	useEffect(() => {
		if (window.location.search) {
			const params = qs.parse(window.location.search.substring(1))

			dispatch(
				setFilters({
					categoryId: Number(params.categoryId),
					page: Number(params.page),
					sortType: params.sortType as SortType,
				})
			)

			isSearch.current = true
		}
	}, [])

	/** –í—ã–∑—ã–≤–∞–µ–º getPizzas() –Ω–∞ –≤—Ç–æ—Ä–æ–º –∏ –¥–∞–ª–µ–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ, —á—Ç–æ–±—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —Ä–µ–¥–∞–∫—Å–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ */
	useEffect(() => {
		if (!isSearch.current) {
			getPizzas()
		}
		isSearch.current = false

		window.scrollTo(0, 0)
	}, [categoryId, sortType, search, page])

	const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />)
	const skeletons = [...new Array(4)].map((_, index) => (
		<Skeleton key={index} />
	))
	return (
		<div className='container'>
			<div className='content__top'>
				<Categories />
				<Sort />
			</div>
			<h2 className='content__title'>–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
			{status === 'error' ? (
				<div className='cart cart--empty'>
					<h2>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–∏—Ç—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï</h2>
				</div>
			) : (
				<>
					<div className='content__items'>
						{status === 'loading' ? skeletons : pizzas}
					</div>
					<Pagination />
				</>
			)}
		</div>
	)
}

export default Home
